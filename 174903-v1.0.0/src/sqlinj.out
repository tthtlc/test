                   
                   
┌─────────────────┐
│ 2 Code Findings │
└─────────────────┘
                                                                                
    /src/174903-v1.0.0/src/CWE_89__unserialize__CAST-cast_float__multiple_select
  -sprintf_%u.php                                                               
       myrule.sqlinj.tainted-sql-string                                         
          User data flows into this manually-constructed SQL string. User data  
  can be safely inserted                                                        
          into SQL strings using prepared statements or an object-relational    
  mapper (ORM). Manually-                                                       
          constructed SQL strings is a possible indicator of SQL injection,     
  which could let an                                                            
          attacker steal or manipulate data from the database. Instead, use     
  prepared statements                                                           
          (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or 
  a safe library.                                                               
                                                                                
           12┆ $query = sprintf("SELECT * FROM COURSE c WHERE c.id IN (SELECT   
  idcourse FROM REGISTRATION WHERE idstudent=%u)", $tainted);                   
            ⋮┆----------------------------------------
       myrule.sqlinj.tainted-sql-string2                                        
          User data flows into this manually-constructed SQL string. User data  
  can be safely inserted                                                        
          into SQL strings using prepared statements or an object-relational    
  mapper (ORM). Manually-                                                       
          constructed SQL strings is a possible indicator of SQL injection,     
  which could let an                                                            
          attacker steal or manipulate data from the database. Instead, use     
  prepared statements                                                           
          (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or 
  a safe library.                                                               
                                                                                
           12┆ $query = sprintf("SELECT * FROM COURSE c WHERE c.id IN (SELECT   
  idcourse FROM REGISTRATION WHERE idstudent=%u)", $tainted);                   

